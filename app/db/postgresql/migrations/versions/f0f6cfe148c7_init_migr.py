"""init migr

Revision ID: f0f6cfe148c7
Revises: 
Create Date: 2023-08-19 20:40:35.264870

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "f0f6cfe148c7"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("password_hash", sa.String(), nullable=False),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("deleted_at", sa.TIMESTAMP(), nullable=True),
        sa.PrimaryKeyConstraint("uuid", name=op.f("pk__users")),
        sa.UniqueConstraint("email", name=op.f("uq__users__email")),
    )
    op.create_index(op.f("ix__users__uuid"), "users", ["uuid"], unique=True)
    op.create_table(
        "files",
        sa.Column("path", sa.String(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM("new", "changed", name="files_status"),
            nullable=False,
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("deleted_at", sa.TIMESTAMP(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.uuid"], name=op.f("fk__files__user_id__users")
        ),
        sa.PrimaryKeyConstraint("uuid", name=op.f("pk__files")),
    )
    op.create_index(op.f("ix__files__uuid"), "files", ["uuid"], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('user_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("password_hash", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="user_pkey"),
        sa.UniqueConstraint("email", name="user_email_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "booking",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("room_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("date_from", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("date_to", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("price", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "total_cost",
            sa.INTEGER(),
            sa.Computed("((date_to - date_from) * price)", persisted=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "total_days",
            sa.INTEGER(),
            sa.Computed("(date_to - date_from)", persisted=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(["room_id"], ["room.id"], name="booking_room_id_fkey"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], name="booking_user_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="booking_pkey"),
    )
    op.create_table(
        "hotel",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('hotel_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("location", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("services", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("rooms_quantity", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("image_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="hotel_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "room",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("hotel_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "services",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("image_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("price", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("quantity", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["hotel_id"], ["hotel.id"], name="room_hotel_id_fkey"),
        sa.PrimaryKeyConstraint("id", name="room_pkey"),
    )
    op.drop_index(op.f("ix__files__uuid"), table_name="files")
    op.drop_table("files")
    op.drop_index(op.f("ix__users__uuid"), table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###
